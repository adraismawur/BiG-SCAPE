#pylint: skip-file
import sys
from math import log


# TODO: marked for deletion
def network_parser(network_file, Jaccardw, DSSw, GKw, anchorboost):
    network = {}
    
    try:
        with open(network_file, "r") as handle:
            next(handle) # ignore first line with column names
            for line in handle:
                if line[0] != "#":
                    strippedline = line.strip().split("\t")
                    
                    # don't read the combined and shared group (last two columns)
                    # as these are generated by write_network_matrix()
                    network[strippedline[0], strippedline[1]] = strippedline[2:6]
                    network[strippedline[0], strippedline[1]].extend(float(x) for x in strippedline[6:-2]) 
        handle.close()
    except IOError:
        sys.exit("Error: Cannot open file " + network_file)
    
    # re-calculate raw distance with potentially new weights
    for (a, b) in network.items():
        Jaccard = network[a,b][7]
        #DSS = network[a,b][8] <- will be recalculated
        AI = network[a,b][9]
        
        DSS_non_anchor = network[a,b][10]
        DSS_anchor = network[a,b][11]
        S_anchor = network[a,b][12]
        S = network[a,b][13]
        
        # Calculate DSS
        if S_anchor != 0 and S != 0:
            non_anchor_prct = S / (S + S_anchor)
            anchor_prct = S_anchor / (S + S_anchor)
            
            non_anchor_weight = non_anchor_prct / (anchor_prct*anchorboost + non_anchor_prct)
            anchor_weight = anchor_prct*anchorboost / (anchor_prct*anchorboost + non_anchor_prct)
        
            DSS = (non_anchor_weight*DSS_non_anchor) + (anchor_weight*DSS_anchor)
            
        elif S_anchor == 0:
            DSS = DSS_non_anchor
            
        else: #only anchor domains were found
            DSS = DSS_anchor

        DSS = 1 - DSS
        
        distance = 1- (Jaccardw * Jaccard) - (DSSw * DSS) - (AI * AI)
        
        if distance <= 0:
            logscore = float("inf")
        else:
            logscore = -log(distance, 2)
            
        sqrd_similarity = (1-distance)**2
        
        network[a,b][4] = logscore
        network[a,b][5] = distance
        network[a,b][6] = sqrd_similarity
        network[a,b][8] = DSS
        
    return network